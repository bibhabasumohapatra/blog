{
  "hash": "a1a3bb0f2dc1e5203c57df0bf4e4c89a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Exponential Moving Average (EMA) in Weight Updates\nauthor: \"Bibhabasu Mohapatra\"\ndate: \"2023-05-28\"\ncategories: [pytorch, code]\nimage: \"image.jpg\"\n---\n\n---\n\ntitle: Exponential Moving Average (EMA) in Weight Updates\nauthor: \"Bibhabasu Mohapatra\"\ndate: \"2023-05-28\"\ncategories: [pytorch, code]\nimage: \"image.jpg\"\n\n\n---\n\n\n\n\n\n### EMA (Exponential Moving Average) is an incredibly useful concept that finds application in various scenarios:\n\n- #### Weight Updates: EMA is used for updating model weights while retaining a historical record of previous weights. This enables the model to blend new information with past knowledge effectively.\n\n- #### Self-Supervised Learning: EMA is commonly employed in Self-Supervised Learning setups. The weights obtained from Self-Supervised Learning are often utilized for downstream tasks like classification and segmentation.\n\n### Clarification on EMA's Impact\n\n##### Initially, there was a misconception that the EMA process directly impacts the ongoing training of model weights. However, this is not the case. In reality, the EMA process involves the creation of a duplicated set of weights. These duplicate weights are updated alongside the primary training process, and the updated weights are subsequently leveraged for validation purposes. As a result, the overall training procedure remains unaffected by the EMA process.\n\n<img src=\"ema.png\"> \n\n::: {#4619f07f .cell _cell_guid='b1076dfc-b9ad-4769-8c92-a6c4dae69d19' _uuid='8f2839f25d086af736a60e9eeb907d3b93b6e0e5' execution='{\"iopub.execute_input\":\"2023-08-14T15:14:27.136587Z\",\"iopub.status.busy\":\"2023-08-14T15:14:27.136194Z\",\"iopub.status.idle\":\"2023-08-14T15:14:30.874853Z\",\"shell.execute_reply\":\"2023-08-14T15:14:30.873447Z\"}' papermill='{\"duration\":3.746175,\"end_time\":\"2023-08-14T15:14:30.877588\",\"exception\":false,\"start_time\":\"2023-08-14T15:14:27.131413\",\"status\":\"completed\"}' tags='[]' execution_count=1}\n``` {.python .cell-code}\nimport torch.nn as nn\nimport torch\nfrom copy import deepcopy\n\nclass Model(nn.Module):\n    def __init__(self,):\n        super().__init__()\n\n        self.layer = nn.Linear(3,3,bias=False)\n\n    def forward(self,x):\n        return self.layer(x)\n    \n@torch.no_grad()\ndef init_weights_1(m):\n    print(m)\n    if type(m) == nn.Linear:\n        m.weight.fill_(1.0)\n        print(m.weight)\n\n@torch.no_grad()\ndef init_weights_2(m):\n    print(m)\n    if type(m) == nn.Linear:\n        m.weight.fill_(2.0)\n        print(m.weight)\n```\n:::\n\n\n::: {#f588251f .cell execution='{\"iopub.execute_input\":\"2023-08-14T15:14:30.886828Z\",\"iopub.status.busy\":\"2023-08-14T15:14:30.886198Z\",\"iopub.status.idle\":\"2023-08-14T15:14:30.999982Z\",\"shell.execute_reply\":\"2023-08-14T15:14:30.998761Z\"}' papermill='{\"duration\":0.121662,\"end_time\":\"2023-08-14T15:14:31.003024\",\"exception\":false,\"start_time\":\"2023-08-14T15:14:30.881362\",\"status\":\"completed\"}' tags='[]' execution_count=2}\n``` {.python .cell-code}\nteacher = Model().apply(init_weights_1) ## TO BE UPDATED\nstudent = Model().apply(init_weights_2) ## From Training\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear(in_features=3, out_features=3, bias=False)\nParameter containing:\ntensor([[1., 1., 1.],\n        [1., 1., 1.],\n        [1., 1., 1.]], requires_grad=True)\nModel(\n  (layer): Linear(in_features=3, out_features=3, bias=False)\n)\nLinear(in_features=3, out_features=3, bias=False)\nParameter containing:\ntensor([[2., 2., 2.],\n        [2., 2., 2.],\n        [2., 2., 2.]], requires_grad=True)\nModel(\n  (layer): Linear(in_features=3, out_features=3, bias=False)\n)\n```\n:::\n:::\n\n\n::: {#278e1d21 .cell execution='{\"iopub.execute_input\":\"2023-08-14T15:14:31.012591Z\",\"iopub.status.busy\":\"2023-08-14T15:14:31.012166Z\",\"iopub.status.idle\":\"2023-08-14T15:14:31.019071Z\",\"shell.execute_reply\":\"2023-08-14T15:14:31.018176Z\"}' papermill='{\"duration\":0.014386,\"end_time\":\"2023-08-14T15:14:31.021255\",\"exception\":false,\"start_time\":\"2023-08-14T15:14:31.006869\",\"status\":\"completed\"}' tags='[]' execution_count=3}\n``` {.python .cell-code}\n@torch.no_grad()\ndef ema_model(teacher_model, student_model,decay=0.5):\n    teacher_model.eval()\n\n    for teacher_wt,student_wt in zip(teacher_model.state_dict().values(),student_model.state_dict().values()):\n        teacher_wt.copy_(teacher_wt*decay + student_wt*(1-decay))\n```\n:::\n\n\n::: {#05bfabf7 .cell execution='{\"iopub.execute_input\":\"2023-08-14T15:14:31.031324Z\",\"iopub.status.busy\":\"2023-08-14T15:14:31.030527Z\",\"iopub.status.idle\":\"2023-08-14T15:14:31.040022Z\",\"shell.execute_reply\":\"2023-08-14T15:14:31.039186Z\"}' papermill='{\"duration\":0.017168,\"end_time\":\"2023-08-14T15:14:31.042463\",\"exception\":false,\"start_time\":\"2023-08-14T15:14:31.025295\",\"status\":\"completed\"}' tags='[]' execution_count=4}\n``` {.python .cell-code}\nema_model(teacher,student)\n```\n:::\n\n\n::: {#adce15df .cell execution='{\"iopub.execute_input\":\"2023-08-14T15:14:31.052055Z\",\"iopub.status.busy\":\"2023-08-14T15:14:31.051317Z\",\"iopub.status.idle\":\"2023-08-14T15:14:31.060576Z\",\"shell.execute_reply\":\"2023-08-14T15:14:31.059445Z\"}' papermill='{\"duration\":0.017,\"end_time\":\"2023-08-14T15:14:31.063255\",\"exception\":false,\"start_time\":\"2023-08-14T15:14:31.046255\",\"status\":\"completed\"}' tags='[]' execution_count=5}\n``` {.python .cell-code}\nteacher.state_dict()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nOrderedDict([('layer.weight',\n              tensor([[1.5000, 1.5000, 1.5000],\n                      [1.5000, 1.5000, 1.5000],\n                      [1.5000, 1.5000, 1.5000]]))])\n```\n:::\n:::\n\n\n::: {#4a85df10 .cell execution='{\"iopub.execute_input\":\"2023-08-14T15:14:31.073259Z\",\"iopub.status.busy\":\"2023-08-14T15:14:31.072576Z\",\"iopub.status.idle\":\"2023-08-14T15:14:31.080418Z\",\"shell.execute_reply\":\"2023-08-14T15:14:31.079313Z\"}' papermill='{\"duration\":0.015332,\"end_time\":\"2023-08-14T15:14:31.082580\",\"exception\":false,\"start_time\":\"2023-08-14T15:14:31.067248\",\"status\":\"completed\"}' tags='[]' execution_count=6}\n``` {.python .cell-code}\nstudent.state_dict()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nOrderedDict([('layer.weight',\n              tensor([[2., 2., 2.],\n                      [2., 2., 2.],\n                      [2., 2., 2.]]))])\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}