{"title":"Exponential Moving Average (EMA) in Weight Updates","markdown":{"yaml":{"title":"Exponential Moving Average (EMA) in Weight Updates","author":"Bibhabasu Mohapatra","date":"2023-05-28","categories":["pytorch","code"],"image":"image.jpg"},"headingText":"EMA (Exponential Moving Average) is an incredibly useful concept that finds application in various scenarios:","containsRefs":false,"markdown":"\n\n\n- #### Weight Updates: EMA is used for updating model weights while retaining a historical record of previous weights. This enables the model to blend new information with past knowledge effectively.\n\n- #### Self-Supervised Learning: EMA is commonly employed in Self-Supervised Learning setups. The weights obtained from Self-Supervised Learning are often utilized for downstream tasks like classification and segmentation.\n\n### Clarification on EMA's Impact\n\n##### Initially, there was a misconception that the EMA process directly impacts the ongoing training of model weights. However, this is not the case. In reality, the EMA process involves the creation of a duplicated set of weights. These duplicate weights are updated alongside the primary training process, and the updated weights are subsequently leveraged for validation purposes. As a result, the overall training procedure remains unaffected by the EMA process.\n\n<img src=\"ema.png\"> \n\n```{python}\nimport torch.nn as nn\nimport torch\nfrom copy import deepcopy\n\nclass Model(nn.Module):\n    def __init__(self,):\n        super().__init__()\n\n        self.layer = nn.Linear(3,3,bias=False)\n\n    def forward(self,x):\n        return self.layer(x)\n    \n@torch.no_grad()\ndef init_weights_1(m):\n    print(m)\n    if type(m) == nn.Linear:\n        m.weight.fill_(1.0)\n        print(m.weight)\n\n@torch.no_grad()\ndef init_weights_2(m):\n    print(m)\n    if type(m) == nn.Linear:\n        m.weight.fill_(2.0)\n        print(m.weight)\n```\n\n```{python}\n#| execution: {iopub.execute_input: '2023-08-14T15:14:30.886828Z', iopub.status.busy: '2023-08-14T15:14:30.886198Z', iopub.status.idle: '2023-08-14T15:14:30.999982Z', shell.execute_reply: '2023-08-14T15:14:30.998761Z'}\n#| papermill: {duration: 0.121662, end_time: '2023-08-14T15:14:31.003024', exception: false, start_time: '2023-08-14T15:14:30.881362', status: completed}\n#| tags: []\nteacher = Model().apply(init_weights_1) ## TO BE UPDATED\nstudent = Model().apply(init_weights_2) ## From Training\n```\n\n```{python}\n#| execution: {iopub.execute_input: '2023-08-14T15:14:31.012591Z', iopub.status.busy: '2023-08-14T15:14:31.012166Z', iopub.status.idle: '2023-08-14T15:14:31.019071Z', shell.execute_reply: '2023-08-14T15:14:31.018176Z'}\n#| papermill: {duration: 0.014386, end_time: '2023-08-14T15:14:31.021255', exception: false, start_time: '2023-08-14T15:14:31.006869', status: completed}\n#| tags: []\n@torch.no_grad()\ndef ema_model(teacher_model, student_model,decay=0.5):\n    teacher_model.eval()\n\n    for teacher_wt,student_wt in zip(teacher_model.state_dict().values(),student_model.state_dict().values()):\n        teacher_wt.copy_(teacher_wt*decay + student_wt*(1-decay))\n```\n\n```{python}\n#| execution: {iopub.execute_input: '2023-08-14T15:14:31.031324Z', iopub.status.busy: '2023-08-14T15:14:31.030527Z', iopub.status.idle: '2023-08-14T15:14:31.040022Z', shell.execute_reply: '2023-08-14T15:14:31.039186Z'}\n#| papermill: {duration: 0.017168, end_time: '2023-08-14T15:14:31.042463', exception: false, start_time: '2023-08-14T15:14:31.025295', status: completed}\n#| tags: []\nema_model(teacher,student)\n```\n\n```{python}\n#| execution: {iopub.execute_input: '2023-08-14T15:14:31.052055Z', iopub.status.busy: '2023-08-14T15:14:31.051317Z', iopub.status.idle: '2023-08-14T15:14:31.060576Z', shell.execute_reply: '2023-08-14T15:14:31.059445Z'}\n#| papermill: {duration: 0.017, end_time: '2023-08-14T15:14:31.063255', exception: false, start_time: '2023-08-14T15:14:31.046255', status: completed}\n#| tags: []\nteacher.state_dict()\n```\n\n```{python}\n#| execution: {iopub.execute_input: '2023-08-14T15:14:31.073259Z', iopub.status.busy: '2023-08-14T15:14:31.072576Z', iopub.status.idle: '2023-08-14T15:14:31.080418Z', shell.execute_reply: '2023-08-14T15:14:31.079313Z'}\n#| papermill: {duration: 0.015332, end_time: '2023-08-14T15:14:31.082580', exception: false, start_time: '2023-08-14T15:14:31.067248', status: completed}\n#| tags: []\nstudent.state_dict()\n```\n\n\n\n","srcMarkdownNoYaml":"\n\n### EMA (Exponential Moving Average) is an incredibly useful concept that finds application in various scenarios:\n\n- #### Weight Updates: EMA is used for updating model weights while retaining a historical record of previous weights. This enables the model to blend new information with past knowledge effectively.\n\n- #### Self-Supervised Learning: EMA is commonly employed in Self-Supervised Learning setups. The weights obtained from Self-Supervised Learning are often utilized for downstream tasks like classification and segmentation.\n\n### Clarification on EMA's Impact\n\n##### Initially, there was a misconception that the EMA process directly impacts the ongoing training of model weights. However, this is not the case. In reality, the EMA process involves the creation of a duplicated set of weights. These duplicate weights are updated alongside the primary training process, and the updated weights are subsequently leveraged for validation purposes. As a result, the overall training procedure remains unaffected by the EMA process.\n\n<img src=\"ema.png\"> \n\n```{python}\nimport torch.nn as nn\nimport torch\nfrom copy import deepcopy\n\nclass Model(nn.Module):\n    def __init__(self,):\n        super().__init__()\n\n        self.layer = nn.Linear(3,3,bias=False)\n\n    def forward(self,x):\n        return self.layer(x)\n    \n@torch.no_grad()\ndef init_weights_1(m):\n    print(m)\n    if type(m) == nn.Linear:\n        m.weight.fill_(1.0)\n        print(m.weight)\n\n@torch.no_grad()\ndef init_weights_2(m):\n    print(m)\n    if type(m) == nn.Linear:\n        m.weight.fill_(2.0)\n        print(m.weight)\n```\n\n```{python}\n#| execution: {iopub.execute_input: '2023-08-14T15:14:30.886828Z', iopub.status.busy: '2023-08-14T15:14:30.886198Z', iopub.status.idle: '2023-08-14T15:14:30.999982Z', shell.execute_reply: '2023-08-14T15:14:30.998761Z'}\n#| papermill: {duration: 0.121662, end_time: '2023-08-14T15:14:31.003024', exception: false, start_time: '2023-08-14T15:14:30.881362', status: completed}\n#| tags: []\nteacher = Model().apply(init_weights_1) ## TO BE UPDATED\nstudent = Model().apply(init_weights_2) ## From Training\n```\n\n```{python}\n#| execution: {iopub.execute_input: '2023-08-14T15:14:31.012591Z', iopub.status.busy: '2023-08-14T15:14:31.012166Z', iopub.status.idle: '2023-08-14T15:14:31.019071Z', shell.execute_reply: '2023-08-14T15:14:31.018176Z'}\n#| papermill: {duration: 0.014386, end_time: '2023-08-14T15:14:31.021255', exception: false, start_time: '2023-08-14T15:14:31.006869', status: completed}\n#| tags: []\n@torch.no_grad()\ndef ema_model(teacher_model, student_model,decay=0.5):\n    teacher_model.eval()\n\n    for teacher_wt,student_wt in zip(teacher_model.state_dict().values(),student_model.state_dict().values()):\n        teacher_wt.copy_(teacher_wt*decay + student_wt*(1-decay))\n```\n\n```{python}\n#| execution: {iopub.execute_input: '2023-08-14T15:14:31.031324Z', iopub.status.busy: '2023-08-14T15:14:31.030527Z', iopub.status.idle: '2023-08-14T15:14:31.040022Z', shell.execute_reply: '2023-08-14T15:14:31.039186Z'}\n#| papermill: {duration: 0.017168, end_time: '2023-08-14T15:14:31.042463', exception: false, start_time: '2023-08-14T15:14:31.025295', status: completed}\n#| tags: []\nema_model(teacher,student)\n```\n\n```{python}\n#| execution: {iopub.execute_input: '2023-08-14T15:14:31.052055Z', iopub.status.busy: '2023-08-14T15:14:31.051317Z', iopub.status.idle: '2023-08-14T15:14:31.060576Z', shell.execute_reply: '2023-08-14T15:14:31.059445Z'}\n#| papermill: {duration: 0.017, end_time: '2023-08-14T15:14:31.063255', exception: false, start_time: '2023-08-14T15:14:31.046255', status: completed}\n#| tags: []\nteacher.state_dict()\n```\n\n```{python}\n#| execution: {iopub.execute_input: '2023-08-14T15:14:31.073259Z', iopub.status.busy: '2023-08-14T15:14:31.072576Z', iopub.status.idle: '2023-08-14T15:14:31.080418Z', shell.execute_reply: '2023-08-14T15:14:31.079313Z'}\n#| papermill: {duration: 0.015332, end_time: '2023-08-14T15:14:31.082580', exception: false, start_time: '2023-08-14T15:14:31.067248', status: completed}\n#| tags: []\nstudent.state_dict()\n```\n\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.55","theme":"cosmo","title-block-banner":true,"title":"Exponential Moving Average (EMA) in Weight Updates","author":"Bibhabasu Mohapatra","date":"2023-05-28","categories":["pytorch","code"],"image":"image.jpg"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}